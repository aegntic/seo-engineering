version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: seo-mongodb
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=seoautomate
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
    networks:
      - seo_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and rate limiting
  redis:
    image: redis:alpine
    container_name: seo-redis
    volumes:
      - redis_data:/data
    networks:
      - seo_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API server
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.prod
    container_name: seo-api
    volumes:
      - ./api/uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/seoautomate?authSource=admin
      - PORT=3001
      - REDIS_URI=redis://redis:6379
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - N8N_API_KEY=${N8N_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    networks:
      - seo_network
    depends_on:
      - mongodb
      - redis
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend
  website:
    build:
      context: ./website
      dockerfile: Dockerfile.prod
    container_name: seo-website
    environment:
      - VITE_API_URL=https://${DOMAIN}/api
      - VITE_STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
    networks:
      - seo_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # n8n
  n8n:
    image: n8nio/n8n:latest
    container_name: seo-n8n
    environment:
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - NODE_ENV=production
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=${SMTP_HOST}
      - N8N_SMTP_PORT=${SMTP_PORT:-587}
      - N8N_SMTP_USER=${SMTP_USER}
      - N8N_SMTP_PASS=${SMTP_PASS}
      - N8N_SMTP_SENDER=${SMTP_SENDER:-noreply@seoautomate.com}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows/n8n:/home/node/.n8n/workflows
    networks:
      - seo_network
    depends_on:
      - postgres
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Postgres for n8n
  postgres:
    image: postgres:14
    container_name: seo-postgres
    environment:
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - POSTGRES_DB=n8n
      - POSTGRES_NON_ROOT_USER=n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - seo_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: seo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - website_build:/usr/share/nginx/html
    networks:
      - seo_network
    depends_on:
      - api
      - website
      - n8n
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: seo-prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - seo_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: seo-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    networks:
      - seo_network
    depends_on:
      - prometheus
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Node exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: seo-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - seo_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Automated backup service
  backup:
    image: alpine:latest
    container_name: seo-backup
    volumes:
      - ./scripts/backup.sh:/backup.sh
      - ./backups:/backups
      - mongodb_data:/data/db:ro
      - postgres_data:/var/lib/postgresql/data:ro
    command: /bin/sh -c "chmod +x /backup.sh && crond -f -d 8"
    networks:
      - seo_network
    depends_on:
      - mongodb
      - postgres
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  seo_network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data:
  postgres_data:
  n8n_data:
  prometheus_data:
  grafana_data:
  website_build:
